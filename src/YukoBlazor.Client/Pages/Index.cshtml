@page "/"
@page "/p/{p}"
@page "/year/{year}/month/{month}"
@page "/year/{year}/month/{month}/p/{p}"
@page "/catalog/{catalog}"
@page "/catalog/{catalog}/p/{p}"
@page "/tag/{tag}"
@page "/tag/{tag}/p/{p}"
@using System.Text
@inject HttpClient Http

<div id="main-wrapper">
    <div class="main section" id="main">
        <div class="widget Blog" data-version="1" id="Blog1">
            <div class="blog-posts hfeed">

                @if (posts != null)
                {
                    @foreach (var x in posts)
                    {
                        <PostMainBody PostModel="@x" ShowReadMore="true" />
                    }
                }
            </div>
            <div class="blog-pager" id="blog-pager">
                <div class="showpageArea">
                    <span style="COLOR: #000;" class="showpageOf"> Pages (@totalPages)</span>
                    @for (var i = 1; i <= totalPages; ++i)
                    {
                        if (p == i)
                        {
                            <span class="showpagePoint">@i</span>
                        }
                        else
                        {
                            <span class="showpageNum">
                                <a href="@BuildLink(i)">@i</a>
                            </span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@functions
{
    IEnumerable<PostViewModel> posts;

    int totalPages = 1;

    [Parameter] int p { get; set; } = 1;

    [Parameter] int? year { get; set; }

    [Parameter] int? month { get; set; }

    [Parameter] string catalog { get; set; }

    [Parameter] string tag { get; set; }

    private string BuildLink(int page)
    {
        string link;
        if (year.HasValue && month.HasValue)
        {
            link = $"/year/{year.Value}/month/{month.Value}";
        }
        else if (!string.IsNullOrEmpty(catalog))
        {
            link = $"/catalog/{catalog}";
        }
        else if (!string.IsNullOrEmpty(tag))
        {
            link = $"/tag/{tag}";
        }
        else
        {
            link = "";
        }

        if (page > 0)
        {
            link = link + $"/p/{page}";
        }

        return link;
    }

    protected override async Task OnInitAsync()
    {
        var queryBuilder = new StringBuilder($"?page={p}");

        if (year.HasValue && month.HasValue)
        {
            queryBuilder.Append($"&from={new DateTime(year.Value, month.Value, 1).ToString("yyyy-MM-dd")}");
            queryBuilder.Append($"&to={new DateTime(year.Value, month.Value, 1).AddMonths(1).ToString("yyyy-MM-dd")}");
        }

        if (!string.IsNullOrEmpty(catalog))
        {
            queryBuilder.Append($"&catalog={catalog}");
        }

        if (!string.IsNullOrEmpty(catalog))
        {
            queryBuilder.Append($"&tag={tag}");
        }

        var result = await Http.GetJsonAsync<PagedViewModel<PostViewModel>>("api/Post" + queryBuilder.ToString());
        posts = result.Data;
        totalPages = result.TotalPage;
    }
}